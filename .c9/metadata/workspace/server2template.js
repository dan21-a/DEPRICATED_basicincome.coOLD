{"filter":false,"title":"server2template.js","tooltip":"/server2template.js","undoManager":{"mark":2,"position":2,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":50}},"text":"var WebSocketServer = require('websocket').server;"},{"action":"insertText","range":{"start":{"row":0,"column":50},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":45,"column":0}},"lines":["var http = require('http');","","var server = http.createServer(function(request, response) {","    console.log((new Date()) + ' Received request for ' + request.url);","    response.writeHead(404);","    response.end();","});","server.listen(8080, function() {","    console.log((new Date()) + ' Server is listening on port 8080');","});","","var wsServer = new WebSocketServer({","    httpServer: server,","    autoAcceptConnections: false","});","","function originIsAllowed(origin) {","  // put logic here to detect whether the specified origin is allowed.","  return true;","}","","wsServer.on('request', function(request) {","    if (!originIsAllowed(request.origin)) {","      // Make sure we only accept requests from an allowed origin","      request.reject();","      console.log((new Date()) + ' Connection from origin ' + request.origin + ' rejected.');","      return;","    }","","    var connection = request.accept('echo-protocol', request.origin);","    console.log((new Date()) + ' Connection accepted.');","    connection.on('message', function(message) {","        if (message.type === 'utf8') {","            console.log('Received Message: ' + message.utf8Data);","            connection.sendUTF(message.utf8Data);","        }","        else if (message.type === 'binary') {","            console.log('Received Binary Message of ' + message.binaryData.length + ' bytes');","            connection.sendBytes(message.binaryData);","        }","    });","    connection.on('close', function(reasonCode, description) {","        console.log((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected.');","    });"]},{"action":"insertText","range":{"start":{"row":45,"column":0},"end":{"row":45,"column":3}},"text":"});"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":45,"column":0},"end":{"row":45,"column":3}},"text":"});"},{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":45,"column":0}},"nl":"\n","lines":["var WebSocketServer = require('websocket').server;","var http = require('http');","","var server = http.createServer(function(request, response) {","    console.log((new Date()) + ' Received request for ' + request.url);","    response.writeHead(404);","    response.end();","});","server.listen(8080, function() {","    console.log((new Date()) + ' Server is listening on port 8080');","});","","var wsServer = new WebSocketServer({","    httpServer: server,","    autoAcceptConnections: false","});","","function originIsAllowed(origin) {","  // put logic here to detect whether the specified origin is allowed.","  return true;","}","","wsServer.on('request', function(request) {","    if (!originIsAllowed(request.origin)) {","      // Make sure we only accept requests from an allowed origin","      request.reject();","      console.log((new Date()) + ' Connection from origin ' + request.origin + ' rejected.');","      return;","    }","","    var connection = request.accept('echo-protocol', request.origin);","    console.log((new Date()) + ' Connection accepted.');","    connection.on('message', function(message) {","        if (message.type === 'utf8') {","            console.log('Received Message: ' + message.utf8Data);","            connection.sendUTF(message.utf8Data);","        }","        else if (message.type === 'binary') {","            console.log('Received Binary Message of ' + message.binaryData.length + ' bytes');","            connection.sendBytes(message.binaryData);","        }","    });","    connection.on('close', function(reasonCode, description) {","        console.log((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected.');","    });"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":50}},"text":"var WebSocketServer = require('websocket').server;"},{"action":"insertText","range":{"start":{"row":0,"column":50},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":29,"column":0}},"lines":["var http = require('http');","","var server = http.createServer(function(request, response) {","    // process HTTP request. Since we're writing just WebSockets server","    // we don't have to implement anything.","});","server.listen(443, function() { });","console.log(\"socket on 443\");","// create the server","var wsServer = new WebSocketServer({","    httpServer: server","});","","// WebSocket server","wsServer.on('request', function(request) {","    var connection = request.accept(null, request.origin);","","    // This is the most important callback for us, we'll handle","    // all messages from users here.","    connection.on('message', function(message) {","        if (message.type === 'utf8') {","            // process WebSocket message","        }","    });","","    connection.on('close', function(connection) {","        // close user connection","    });"]},{"action":"insertText","range":{"start":{"row":29,"column":0},"end":{"row":29,"column":3}},"text":"});"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":29,"column":0},"end":{"row":29,"column":3}},"text":"});"},{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":29,"column":0}},"nl":"\n","lines":["var WebSocketServer = require('websocket').server;","var http = require('http');","","var server = http.createServer(function(request, response) {","    // process HTTP request. Since we're writing just WebSockets server","    // we don't have to implement anything.","});","server.listen(443, function() { });","console.log(\"socket on 443\");","// create the server","var wsServer = new WebSocketServer({","    httpServer: server","});","","// WebSocket server","wsServer.on('request', function(request) {","    var connection = request.accept(null, request.origin);","","    // This is the most important callback for us, we'll handle","    // all messages from users here.","    connection.on('message', function(message) {","        if (message.type === 'utf8') {","            // process WebSocket message","        }","    });","","    connection.on('close', function(connection) {","        // close user connection","    });"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":50}},"text":"var WebSocketServer = require('websocket').server;"},{"action":"insertText","range":{"start":{"row":0,"column":50},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":29,"column":0}},"lines":["var http = require('http');","","var server = http.createServer(function(request, response) {","    // process HTTP request. Since we're writing just WebSockets server","    // we don't have to implement anything.","});","server.listen(443, function() { });","","// create the server","wsServer = new WebSocketServer({","    httpServer: server","});","","// WebSocket server","wsServer.on('request', function(request) {","    var connection = request.accept(null, request.origin);","","    // This is the most important callback for us, we'll handle","    // all messages from users here.","    connection.on('message', function(message) {","        if (message.type === 'utf8') {","            // process WebSocket message","        }","    });","","    connection.on('close', function(connection) {","        // close user connection","    });"]},{"action":"insertText","range":{"start":{"row":29,"column":0},"end":{"row":29,"column":3}},"text":"});"}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":13,"column":0},"end":{"row":13,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1413291372631,"hash":"f0ee7ab307f3533d972232d96aeb0f21425d1dcd"}